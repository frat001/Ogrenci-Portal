// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentPortal_DataAccess.Context.IdentityContext;

#nullable disable

namespace StudentPortal_DataAccess.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240218083645_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b609c887-e794-4762-be5a-6c95232812a4",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "74f37192-b74b-4330-b875-372e82c04002",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "e256341e-70f6-4573-b09a-ab4205a7efc6",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b",
                            Name = "hrPersonal",
                            NormalizedName = "HRPERSONAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            RoleId = "b609c887-e794-4762-be5a-6c95232812a4"
                        },
                        new
                        {
                            UserId = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            RoleId = "e256341e-70f6-4573-b09a-ab4205a7efc6"
                        },
                        new
                        {
                            UserId = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            RoleId = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f01d82d4-ca71-42b4-a861-85797a8e18fa",
                            CreatedDate = new DateTime(2024, 2, 18, 11, 36, 44, 714, DateTimeKind.Local).AddTicks(3089),
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFVdbz3sZFkC8uHLBpwuLnsfh3Vb22EEFJwAb7FeEwM23L832HZk2tF5SIHZGUIh6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddd1bdaa-6fc4-4562-a488-de0742ce7c65",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "537d7b01-7079-45b5-92c1-b648cc65a073",
                            CreatedDate = new DateTime(2024, 2, 18, 11, 36, 44, 802, DateTimeKind.Local).AddTicks(4607),
                            Email = "student@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@TEST.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEJHA1g4vZvysMRhNjdp1Li+8C46sNI/pRnU/oWcbVkfQzQOEAOhQvjxcXS4nmIDRdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c3cad65-fba0-4681-bf0f-22ce5348ac15",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        },
                        new
                        {
                            Id = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d1731e5-5205-4324-9ba4-766e6b2444f7",
                            CreatedDate = new DateTime(2024, 2, 18, 11, 36, 44, 893, DateTimeKind.Local).AddTicks(8512),
                            Email = "student2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@TEST.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEGIaRBu58A5uONr/AYHW7mbtEZdC4xbG7sw8fdnZAlgiLoG0Evp5CjMpaENQ8ABrXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2717fbd-5036-40c8-a90f-076e4f02d31c",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27a2ddef-0434-4770-9975-90218e1fdec5",
                            CreatedDate = new DateTime(2024, 2, 18, 11, 36, 44, 984, DateTimeKind.Local).AddTicks(9648),
                            Email = "teacher@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@TEST.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKVhoiBgyM4HLFRro/hVQIaEblfAo8uISpzAXkBGyS2rBc9cq3YrSfQcFjUvPTsfWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b22dfc4b-f1f3-4e7c-9f6d-56062fd84603",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24ca635f-18fa-4b9e-a4b5-cb09b3ca7163",
                            CreatedDate = new DateTime(2024, 2, 18, 11, 36, 45, 73, DateTimeKind.Local).AddTicks(3835),
                            Email = "hrpersonal@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HRPERSONAL@TEST.COM",
                            NormalizedUserName = "HRPERSONAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEKTsIi0/vsl0niE4MLq2/nCV4rOO/YqVV8atlV+HTkaOaMLRCRx8h/jVaRtub6tRUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a92b3dd-c12e-4028-9660-e05353017be3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "hrPersonal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
