// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentPortal_DataAccess.Context.IdentityContext;

#nullable disable

namespace StudentPortal_DataAccess.Context.IdentityContext.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20240302075932_AppUserUpdate")]
    partial class AppUserUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b609c887-e794-4762-be5a-6c95232812a4",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "74f37192-b74b-4330-b875-372e82c04002",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "e256341e-70f6-4573-b09a-ab4205a7efc6",
                            Name = "teacher",
                            NormalizedName = "TEACHER"
                        },
                        new
                        {
                            Id = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b",
                            Name = "hrPersonal",
                            NormalizedName = "HRPERSONAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            RoleId = "b609c887-e794-4762-be5a-6c95232812a4"
                        },
                        new
                        {
                            UserId = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            RoleId = "74f37192-b74b-4330-b875-372e82c04002"
                        },
                        new
                        {
                            UserId = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            RoleId = "e256341e-70f6-4573-b09a-ab4205a7efc6"
                        },
                        new
                        {
                            UserId = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            RoleId = "dd8eadf8-f90f-41f3-9d81-096ef9e7829b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "92881b6d-cb5d-4809-b964-91074a5184d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9fd11181-f06f-424f-b0ce-7fb40ca83e7c",
                            CreatedDate = new DateTime(2024, 3, 2, 10, 59, 31, 875, DateTimeKind.Local).AddTicks(3980),
                            Email = "admin@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFK3JxsaomkXiitTc83XhsZRHvEz6b8ttSxW3L5rT3njOtys7pnO7DaORJ7l8KcT/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d520a29-c2b3-419b-ad8f-0cffd45fd862",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9d14c127-c5ec-4372-8ba9-26d58ebcdbe1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d945a6b8-8244-44ba-ac5f-9c0304e1e0f4",
                            CreatedDate = new DateTime(2024, 3, 2, 10, 59, 31, 949, DateTimeKind.Local).AddTicks(3122),
                            Email = "student@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@TEST.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEHe3VQ1ZIIwWjj97YjVG6szz3PcCFCdOWc2QH8tgYBAWZBUT2DZOXr6CpFR7RbS4uA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05468dbc-fa28-4559-84ac-768f99ce2920",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student"
                        },
                        new
                        {
                            Id = "2735fcfe-c490-4055-ae67-18ae6eca2212",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5da18c98-c4c2-41c1-9ab7-bb540124596c",
                            CreatedDate = new DateTime(2024, 3, 2, 10, 59, 32, 18, DateTimeKind.Local).AddTicks(1016),
                            Email = "student2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@TEST.COM",
                            NormalizedUserName = "STUDENT2",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+oUolPzfkXIouJlaFy+ZGRUIOQrm173EPO4DzBaLgkwDnFpNm1mWUdUlAoHWhNPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f41f7466-839d-4bb6-b4b9-1016c42f91f3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "student2"
                        },
                        new
                        {
                            Id = "427f1691-2f27-44bb-b9f1-d1a4782381af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7dfeb93-f936-416c-bc8b-b63902eb0501",
                            CreatedDate = new DateTime(2024, 3, 2, 10, 59, 32, 88, DateTimeKind.Local).AddTicks(5597),
                            Email = "teacher@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEACHER@TEST.COM",
                            NormalizedUserName = "TEACHER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAhDOP/7sfOKfZT8cylvNE8kRdJr/6dKIjiwZBA1CiWC80Gj8I0MszTkYIJoKhzNxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4c052279-4db9-45b6-99ef-0e614c622349",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "teacher"
                        },
                        new
                        {
                            Id = "8b3cd4dd-84f7-4c44-8279-7124a458dfbf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "257d0f46-b76c-42c2-b89c-b732520f7b09",
                            CreatedDate = new DateTime(2024, 3, 2, 10, 59, 32, 158, DateTimeKind.Local).AddTicks(8671),
                            Email = "hrpersonal@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HRPERSONAL@TEST.COM",
                            NormalizedUserName = "HRPERSONAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEPbdFkEbBEfRKS77aMoENX4BvRmIXNtwUCDRMNPxozOPntXCUdUWAvOLpgghuqTG8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d66dac7-2684-449e-9ce5-f7ee4d0de5d3",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "hrPersonal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentPortal_Core.Entities.UserEntites.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
